import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from database import get_session, Player, WeeklyPlayer, History

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(update: Update) -> bool:
    return update.effective_user.id == ADMIN_ID

# –ö–æ–º–∞–Ω–¥–∞ /start_vote
async def start_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return

    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        players = context.args
        if not players:
            await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤: /start_vote –ò–≥—Ä–æ–∫1 –ò–≥—Ä–æ–∫2 ...")
            return

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        session.query(WeeklyPlayer).delete()
        session.query(Player).delete()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        for name in players:
            session.add(WeeklyPlayer(name=name))
            session.add(Player(name=name, total_rating=0.0, votes=0))
        session.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(name, callback_data=f"rate_{name}")]
            for name in players
        ]
        keyboard.append([InlineKeyboardButton("üö´ –ù–µ –∏–≥—Ä–∞–ª", callback_data="skip_vote")])

        await update.message.reply_text(
            "‚≠ê *–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!*\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
async def handle_player_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "skip_vote":
        await query.edit_message_text("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω (–≤—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏).")
        return

    _, player_name = query.data.split('_', 1)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏ 1-5
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f"set_rating_{player_name}_{i}")]
        for i in range(1, 6)
    ]
    await query.edit_message_text(
        f"–û—Ü–µ–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ *{player_name}* (1-5):",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="MarkdownV2"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏
async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, _, player_name, rating = query.data.split('_', 3)
    session = get_session()
    try:
        player = session.query(Player).filter_by(name=player_name).first()
        if player:
            player.total_rating += int(rating)
            player.votes += 1
            session.commit()
            await query.edit_message_text(f"‚úÖ –ò–≥—Ä–æ–∫ *{player_name}* –ø–æ–ª—É—á–∏–ª –æ—Ü–µ–Ω–∫—É {rating}!", parse_mode="MarkdownV2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

# –ö–æ–º–∞–Ω–¥–∞ /stop_vote
async def stop_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        return

    session = get_session()
    try:
        players = session.query(Player).order_by(Player.total_rating.desc()).all()
        if len(players) < 3:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MVP –∏ –ø—Ä–∏–∑–µ—Ä–æ–≤
        mvp = players[0].name
        first = players[1].name
        second = players[2].name
        third = players[3].name if len(players) >= 4 else "‚Äì"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = History(
            mvp=mvp,
            first_place=first,
            second_place=second,
            third_place=third
        )
        session.add(history)
        session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            "üèÜ *–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:*\n\n"
            f"üèÖ MVP: {mvp}\n"
            f"ü•á 1-–µ –º–µ—Å—Ç–æ: {first}\n"
            f"ü•à 2-–µ –º–µ—Å—Ç–æ: {second}\n"
            f"ü•â 3-–µ –º–µ—Å—Ç–æ: {third}"
        )
        await update.message.reply_text(response, parse_mode="MarkdownV2")

        # –û–±–Ω—É–ª—è–µ–º –≥–æ–ª–æ—Å–∞
        session.query(Player).delete()
        session.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start_vote", start_vote))
    app.add_handler(CommandHandler("stop_vote", stop_vote))
    app.add_handler(CallbackQueryHandler(handle_player_selection, pattern="^rate_"))
    app.add_handler(CallbackQueryHandler(handle_rating, pattern="^set_rating_"))

    app.run_polling()

if __name__ == "__main__":
    main()