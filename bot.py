import os
import json
import asyncio
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN', '7905448986:AAG5rXLzIjPLK6ayuah9Hsn2VdJKyUPqNPQ')
WEBHOOK_HOST = 'https://cs2-bot-qhok.onrender.com'
WEBHOOK_PATH = f'/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –¢–≤–æ–∏ ID
ADMIN_ID = 113405030
GROUP_ID = -2484381098

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∏ Git
def load_players():
    if not os.path.exists('players.json'):
        with open('players.json', 'w', encoding='utf-8') as f:
            json.dump({"players": []}, f, ensure_ascii=False, indent=4)
    with open('players.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_players(players_data):
    with open('players.json', 'w', encoding='utf-8') as f:
        json.dump(players_data, f, ensure_ascii=False, indent=4)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git
    try:
        subprocess.run(['git', 'add', 'players.json'], check=True)
        subprocess.run(['git', 'commit', '-m', 'Update players.json'], check=True)
        subprocess.run(['git', 'push'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Git: {e}")

def load_maps():
    if not os.path.exists('maps.json'):
        default_maps = {map_name: 0 for map_name in ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]}
        with open('maps.json', 'w', encoding='utf-8') as f:
            json.dump(default_maps, f, ensure_ascii=False, indent=4)
    with open('maps.json', 'r', encoding='utf-8') as f:
        return json.load(f)

def save_maps(maps_data):
    with open('maps.json', 'w', encoding='utf-8') as f:
        json.dump(maps_data, f, ensure_ascii=False, indent=4)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git
    try:
        subprocess.run(['git', 'add', 'maps.json'], check=True)
        subprocess.run(['git', 'commit', '-m', 'Update maps.json'], check=True)
        subprocess.run(['git', 'push'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Git: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    welcome_text = ("–°–∞–ª–∞–º, –±–æ–µ—Ü!\n"
                    "–Ø –±–æ—Ç –≤–∞—à–µ–π CS2-—Ç—É—Å–æ–≤–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                    "üèÜ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–∞—Ä—Ç—ã\n"
                    "üéñ –ü—Ä–∏—Å—É–∂–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã\n"
                    "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                    "‚ÑπÔ∏è –ê–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:")
    
    inline_keyboard = [
        [
            types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help"),
            types.InlineKeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
        ]
    ]
    if message.from_user.id == ADMIN_ID:
        inline_keyboard.extend([
            [
                types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="manage_players"),
                types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_voting")
            ],
            [
                types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã", callback_data="start_map_voting")
            ]
        ])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.reply(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
@dp.callback_query(lambda c: c.data == 'help')
async def process_help(callback_query: types.CallbackQuery):
    help_text = ("üìú **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥**:\n"
                 "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                 "/my_stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                 "**–î–ª—è –∞–¥–º–∏–Ω–∞**:\n"
                 "/add_player 'ID' '–∏–º—è' ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/remove_player 'ID' ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/start_voting ‚Äî –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥\n"
                 "/end_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
                 "/start_map_voting ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/end_map_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/top ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
    await bot.send_message(callback_query.from_user.id, help_text, parse_mode='Markdown')
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(lambda c: c.data == 'my_stats')
async def process_my_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    for p in players:
        if p['id'] == user_id:
            stats = p['stats']
            awards = p['awards']
            response = (f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
                        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}\n"
                        f"MVP: {awards['mvp']} —Ä–∞–∑\n"
                        f"1st: {awards['place1']} —Ä–∞–∑\n"
                        f"2nd: {awards['place2']} —Ä–∞–∑\n"
                        f"3rd: {awards['place3']} —Ä–∞–∑")
            await bot.send_message(user_id, response, parse_mode='Markdown')
            await bot.answer_callback_query(callback_query.id)
            return
    await bot.send_message(user_id, "‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'manage_players')
async def manage_players(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    inline_keyboard = [
        [
            types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player_menu"),
            types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="remove_player_menu")
        ],
        [
            types.InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="mark_absent_menu")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –ú–µ–Ω—é "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'add_player_menu')
async def add_player_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏: /add_player 'ID' '–∏–º—è'\n–ù–∞–ø—Ä–∏–º–µ—Ä: /add_player 123456789 –ò–≤–∞–Ω")
    await bot.answer_callback_query(callback_query.id)

# –ú–µ–Ω—é "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'remove_player_menu')
async def remove_player_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    players = load_players()['players']
    if not players:
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        await bot.answer_callback_query(callback_query.id)
        return
    inline_keyboard = [[types.InlineKeyboardButton(text=f"{player['name']} (ID: {player['id']})", callback_data=f"remove_{player['id']}")] for player in players]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query(lambda c: c.data.startswith('remove_'))
async def process_remove_player(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    player_id = int(callback_query.data.split('_')[1])
    players_data = load_players()
    players_data['players'] = [p for p in players_data['players'] if p['id'] != player_id]
    save_players(players_data)
    await bot.send_message(callback_query.from_user.id, f"‚úÖ –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–¥–∞–ª—ë–Ω!")
    await bot.answer_callback_query(callback_query.id)

# –ú–µ–Ω—é "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'mark_absent_menu')
async def mark_absent_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    players = load_players()['players']
    if not players:
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        await bot.answer_callback_query(callback_query.id)
        return
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    for player in players:
        player['played_last_game'] = True
    save_players({"players": players})
    
    inline_keyboard = [[types.InlineKeyboardButton(text=f"{player['name']} (ID: {player['id']})", callback_data=f"absent_{player['id']}")] for player in players]
    inline_keyboard.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="finish_absent")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –û—Ç–º–µ—Ç–∫–∞ –Ω–µ—É—á–∞—Å—Ç–Ω–∏–∫–∞
@dp.callback_query(lambda c: c.data.startswith('absent_'))
async def mark_absent(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    player_id = int(callback_query.data.split('_')[1])
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['played_last_game'] = False
            await bot.answer_callback_query(callback_query.id, f"{player['name']} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É—á–∞—Å—Ç–Ω–∏–∫!")
            break
    save_players(players_data)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ –Ω–µ—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.callback_query(lambda c: c.data == 'finish_absent')
async def finish_absent(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    players = load_players()['players']
    participants = [p['name'] for p in players if p['played_last_game']]
    absentees = [p['name'] for p in players if not p['played_last_game']]
    response = "‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –æ—Ç–º–µ—á–µ–Ω—ã!\n"
    response += f"–ò–≥—Ä–∞–ª–∏: {', '.join(participants) if participants else '–Ω–∏–∫—Ç–æ'}\n"
    response += f"–ù–µ –∏–≥—Ä–∞–ª–∏: {', '.join(absentees) if absentees else '–Ω–∏–∫—Ç–æ'}"
    await bot.send_message(callback_query.from_user.id, response)
    await bot.answer_callback_query(callback_query.id)

# –ö–æ–º–∞–Ω–¥–∞ /add_player (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['add_player']))
async def add_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_player 'ID' '–∏–º—è'")
        return
    try:
        player_id = int(args[0])
        player_name = args[1]
        players_data = load_players()
        players_data['players'].append({
            "id": player_id,
            "name": player_name,
            "ratings": [],
            "played_last_game": True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—á–∞—Å—Ç–≤—É–µ—Ç
            "awards": {"mvp": 0, "place1": 0, "place2": 0, "place3": 0},
            "stats": {"avg_rating": 0, "mvp_count": 0}
        })
        save_players(players_data)
        await message.reply(f"‚úÖ {player_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤!")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /start_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['start_voting']))
async def start_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    inline_keyboard = [[types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="vote")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(GROUP_ID, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã):", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'start_voting')
async def process_start_voting_button(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    inline_keyboard = [[types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="vote")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(GROUP_ID, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã):", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"
@dp.callback_query(lambda c: c.data == 'vote')
async def process_start_voting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    if user_id not in [p['id'] for p in players]:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
        return
    player = next((p for p in players if p['id'] == user_id), None)
    if not player or not player['played_last_game']:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ!")
        return
    for p in players:
        if p['id'] != user_id:  # –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
            inline_keyboard = [[]]
            for i in range(1, 11):
                inline_keyboard[0].append(types.InlineKeyboardButton(text=str(i), callback_data=f"rate_{p['id']}_{i}"))
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
            await bot.send_message(user_id, f"–û—Ü–µ–Ω–∏ {p['name']} (1-10):", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–≤–µ—Ä—å –ª–∏—á–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
@dp.callback_query(lambda c: c.data.startswith('rate_'))
async def process_rating(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    player_id = int(data[1])
    rating = int(data[2])
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['ratings'].append(rating)
            save_players(players_data)
            await bot.answer_callback_query(callback_query.id, f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {rating} –∏–≥—Ä–æ–∫—É {player['name']}!")
            return

# –ö–æ–º–∞–Ω–¥–∞ /end_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['end_voting']))
async def end_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    players = load_players()['players']
    for player in players:
        if player['ratings']:
            avg_rating = sum(player['ratings']) / len(player['ratings'])
            player['stats']['avg_rating'] = avg_rating
            player['ratings'] = []
        else:
            player['stats']['avg_rating'] = 0

    sorted_players = sorted(players, key=lambda p: p['stats']['avg_rating'], reverse=True)
    if sorted_players:
        sorted_players[0]['awards']['mvp'] += 1
        sorted_players[0]['stats']['mvp_count'] += 1
    if len(sorted_players) >= 2:
        sorted_players[1]['awards']['place1'] += 1
    if len(sorted_players) >= 3:
        sorted_players[2]['awards']['place2'] += 1
    if len(sorted_players) >= 4:
        sorted_players[3]['awards']['place3'] += 1

    save_players({"players": players})
    result = "üèÜ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è**:\n\n"
    for i, p in enumerate(sorted_players, 1):
        awards = f" (MVP: {p['awards']['mvp']}, 1st: {p['awards']['place1']}, 2nd: {p['awards']['place2']}, 3rd: {p['awards']['place3']})"
        result += f"{i}. {p['name']} ‚Äî {p['stats']['avg_rating']:.2f}{awards}\n"
    result += "\nüéñ **–ù–∞–≥—Ä–∞–¥—ã**:\n"
    if sorted_players: result += f"üëë MVP: {sorted_players[0]['name']}\n"
    if len(sorted_players) >= 2: result += f"ü•á 1st: {sorted_players[1]['name']}\n"
    if len(sorted_players) >= 3: result += f"ü•à 2nd: {sorted_players[2]['name']}\n"
    if len(sorted_players) >= 4: result += f"ü•â 3rd: {sorted_players[3]['name']}\n"
    await bot.send_message(GROUP_ID, result, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'start_map_voting')
async def start_map_voting_button(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    maps = ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]
    inline_keyboard = [
        [types.InlineKeyboardButton(text=maps[i], callback_data=f"vote_map_{maps[i]}"),
         types.InlineKeyboardButton(text=maps[i+1], callback_data=f"vote_map_{maps[i+1]}")] for i in range(0, len(maps), 2)
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(GROUP_ID, "üó∫ –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—è:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –ö–æ–º–∞–Ω–¥–∞ /start_map_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['start_map_voting']))
async def start_map_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    maps = ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]
    inline_keyboard = [
        [types.InlineKeyboardButton(text=maps[i], callback_data=f"vote_map_{maps[i]}"),
         types.InlineKeyboardButton(text=maps[i+1], callback_data=f"vote_map_{maps[i+1]}")] for i in range(0, len(maps), 2)
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(GROUP_ID, "üó∫ –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –∫–∞—Ä—Ç—ã
@dp.callback_query(lambda c: c.data.startswith('vote_map_'))
async def process_map_voting(callback_query: types.CallbackQuery):
    map_name = callback_query.data.split('_')[2]
    maps_data = load_maps()
    maps_data[map_name] += 1
    save_maps(maps_data)
    await bot.answer_callback_query(callback_query.id, f"–¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {map_name}!")

# –ö–æ–º–∞–Ω–¥–∞ /end_map_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['end_map_voting']))
async def end_map_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    maps_data = load_maps()
    sorted_maps = sorted(maps_data.items(), key=lambda x: x[1], reverse=True)[:5]
    result = "üó∫ **–¢–æ–ø-5 –∫–∞—Ä—Ç**:\n"
    for i, (map_name, votes) in enumerate(sorted_maps, 1):
        result += f"{i}. {map_name} ‚Äî {votes} –≥–æ–ª–æ—Å–æ–≤\n"
    await bot.send_message(GROUP_ID, result, parse_mode='Markdown')
    save_maps({map_name: 0 for map_name in maps_data})

# –ö–æ–º–∞–Ω–¥–∞ /top
@dp.message(Command(commands=['top']))
async def top_players(message: types.Message):
    players = load_players()['players']
    sorted_players = sorted(players, key=lambda p: p['stats'].get('avg_rating', 0), reverse=True)[:5]
    result = "üèÜ **–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É**:\n"
    for i, p in enumerate(sorted_players, 1):
        result += f"{i}. {p['name']} ‚Äî {p['stats'].get('avg_rating', 0):.2f}\n"
    await message.reply(result, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /my_stats
@dp.message(Command(commands=['my_stats']))
async def my_stats(message: types.Message):
    user_id = message.from_user.id
    players = load_players()['players']
    for p in players:
        if p['id'] == user_id:
            stats = p['stats']
            awards = p['awards']
            response = (f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
                        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}\n"
                        f"MVP: {awards['mvp']} —Ä–∞–∑\n"
                        f"1st: {awards['place1']} —Ä–∞–∑\n"
                        f"2nd: {awards['place2']} —Ä–∞–∑\n"
                        f"3rd: {awards['place3']} —Ä–∞–∑")
            await message.reply(response, parse_mode='Markdown')
            return
    await message.reply("‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook –∏ Git –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup(_):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    try:
        subprocess.run(['git', 'config', '--global', 'user.email', 'bot@example.com'], check=True)
        subprocess.run(['git', 'config', '--global', 'user.name', 'CS2Bot'], check=True)
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git: {e}")
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ aiohttp
app = web.Application()
handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == '__main__':
    port = int(os.getenv("PORT", 5000))
    web.run_app(app, host='0.0.0.0', port=port)
