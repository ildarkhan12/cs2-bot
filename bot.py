import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
TOKEN = os.getenv('TOKEN', '7905448986:AAG5rXLzIjPLK6ayuah9Hsn2VdJKyUPqNPQ')
WEBHOOK_HOST = 'https://cs2-bot-qhok.onrender.com'
WEBHOOK_PATH = f'/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –¢–≤–æ–∏ ID
ADMIN_ID = 113405030  # –¢–≤–æ–π Telegram ID
GROUP_ID = -2484381098  # ID –≥—Ä—É–ø–ø—ã

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_players():
    try:
        with open('players.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"players": []}

def save_players(players_data):
    with open('players.json', 'w', encoding='utf-8') as f:
        json.dump(players_data, f, ensure_ascii=False, indent=4)

def load_maps():
    try:
        with open('maps.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {map_name: 0 for map_name in ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]}

def save_maps(maps_data):
    with open('maps.json', 'w', encoding='utf-8') as f:
        json.dump(maps_data, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    welcome_text = ("–°–∞–ª–∞–º, –±–æ–µ—Ü!\n"
                    "–Ø –±–æ—Ç –≤–∞—à–µ–π CS2-—Ç—É—Å–æ–≤–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                    "üèÜ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–∞—Ä—Ç—ã\n"
                    "üéñ –ü—Ä–∏—Å—É–∂–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã\n"
                    "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                    "‚ÑπÔ∏è –ê–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:")
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.add(
        types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help"),
        types.InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
    )
    if message.from_user.id == ADMIN_ID:
        keyboard.add(
            types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="manage_players"),
            types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_voting"),
            types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã", callback_data="start_map_voting")
        )
    
    await message.reply(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
@dp.callback_query(lambda c: c.data == 'help')
async def process_help(callback_query: types.CallbackQuery):
    help_text = ("üìú **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥**:\n"
                 "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                 "/my_stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                 "**–î–ª—è –∞–¥–º–∏–Ω–∞**:\n"
                 "/add_player <ID> <–∏–º—è> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/remove_player <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/start_voting ‚Äî –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥\n"
                 "/end_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
                 "/start_map_voting ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/end_map_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/top ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
    await bot.send_message(callback_query.from_user.id, help_text, parse_mode='Markdown')
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query(lambda c: c.data == 'my_stats')
async def process_my_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    for p in players:
        if p['id'] == user_id:
            stats = p['stats']
            awards = p['awards']
            response = (f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
                        f"–ü–æ–±–µ–¥: {stats['wins']}\n"
                        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}\n"
                        f"MVP: {awards['mvp']} —Ä–∞–∑\n"
                        f"1st: {awards['place1']} —Ä–∞–∑\n"
                        f"2nd: {awards['place2']} —Ä–∞–∑\n"
                        f"3rd: {awards['place3']} —Ä–∞–∑")
            await bot.send_message(user_id, response, parse_mode='Markdown')
            await bot.answer_callback_query(callback_query.id)
            return
    await bot.send_message(user_id, "‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'manage_players')
async def manage_players(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player_menu"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="remove_player_menu")
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –ú–µ–Ω—é "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'add_player_menu')
async def add_player_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏: /add_player <ID> <–∏–º—è>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /add_player 123456789 –ò–≤–∞–Ω")
    await bot.answer_callback_query(callback_query.id)

# –ú–µ–Ω—é "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'remove_player_menu')
async def remove_player_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    players = load_players()['players']
    if not players:
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        await bot.answer_callback_query(callback_query.id)
        return
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    for player in players:
        keyboard.add(types.InlineKeyboardButton(f"{player['name']} (ID: {player['id']})", callback_data=f"remove_{player['id']}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query(lambda c: c.data.startswith('remove_'))
async def process_remove_player(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    player_id = int(callback_query.data.split('_')[1])
    players_data = load_players()
    players_data['players'] = [p for p in players_data['players'] if p['id'] != player_id]
    save_players(players_data)
    await bot.send_message(callback_query.from_user.id, f"‚úÖ –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–¥–∞–ª—ë–Ω!")
    await bot.answer_callback_query(callback_query.id)

# –ö–æ–º–∞–Ω–¥–∞ /add_player (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['add_player']))
async def add_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_player <ID> <–∏–º—è>")
        return
    try:
        player_id = int(args[0])
        player_name = args[1]
        players_data = load_players()
        players_data['players'].append({
            "id": player_id,
            "name": player_name,
            "ratings": [],
            "awards": {"mvp": 0, "place1": 0, "place2": 0, "place3": 0},
            "stats": {"wins": 0, "avg_rating": 0, "mvp_count": 0}
        })
        save_players(players_data)
        await message.reply(f"‚úÖ {player_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤!")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /start_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['start_voting']))
async def start_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.add(types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="vote"))
    await bot.send_message(GROUP_ID, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥" (–∞–¥–º–∏–Ω)
@dp.callback_query(lambda c: c.data == 'start_voting')
async def process_start_voting_button(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.add(types.InlineKeyboardButton("–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="vote"))
    await bot.send_message(GROUP_ID, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"
@dp.callback_query(lambda c: c.data == 'vote')
async def process_start_voting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    if user_id not in [p['id'] for p in players]:
        await bot.answer_callback_query(callback_query.id, "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
        return
    for player in players:
        if player['id'] != user_id:  # –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{player['id']}_{i}") for i in range(1, 11)]
            keyboard.add(*buttons)
            await bot.send_message(user_id, f"–û—Ü–µ–Ω–∏ {player['name']} (1-10):", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–≤–µ—Ä—å –ª–∏—á–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
@dp.callback_query(lambda c: c.data.startswith('rate_'))
async def process_rating(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    player_id = int(data[1])
    rating = int(data[2])
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['ratings'].append(rating)
            save_players(players_data)
            await bot.answer_callback_query(callback_query.id, f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {rating} –∏–≥—Ä–æ–∫—É {player['name']}!")
            return

# –ö–æ–º–∞–Ω–¥–∞ /end_voting (–∞–¥–º–∏–Ω)
@dp.message(Command(commands=['end_voting']))
async def end_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    players
