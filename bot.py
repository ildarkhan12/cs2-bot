import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
TOKEN = os.getenv('TOKEN', '7905448986:AAG5rXLzIjPLK6ayuah9Hsn2VdJKyUPqNPQ')
WEBHOOK_HOST = 'https://cs2-bot-qhok.onrender.com'
WEBHOOK_PATH = f'/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≥—Ä—É–ø–ø—ã
ADMIN_ID = 113405030
GROUP_ID = -1002484381098
bot_username = "CS2RatingBot"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
voting_active = False
breakthrough_voting_active = False
current_voting_participants = []
voting_message_id = None
breakthrough_message_id = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥
AUTO_FINISH_DELAY = 86400

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def migrate_players_data(data):
    for player in data['players']:
        if 'stats' not in player:
            player['stats'] = {}
        if 'awards' not in player:
            player['awards'] = {"mvp": 0, "place1": 0, "place2": 0, "place3": 0, "breakthrough": 0}
        if 'avg_rating' in player['stats']:
            del player['stats']['avg_rating']
        player['stats'].setdefault('mvp_count', player['awards'].get('mvp', 0))
        player['stats'].setdefault('games_played', 0)
        player['stats'].setdefault('votes_cast', 0)
        if 'rank_points' not in player['stats']:
            points = player['stats']['games_played'] * 5
            points += player['awards'].get('mvp', 0) * 25
            points += player['awards'].get('place1', 0) * 20
            points += player['awards'].get('place2', 0) * 15
            points += player['awards'].get('place3', 0) * 12
            points += player['awards'].get('breakthrough', 0) * 10
            player['stats']['rank_points'] = points
        update_rank(player)
        player['awards'].setdefault('breakthrough', 0)
    return data

def load_players():
    try:
        with open('players.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            migrated_data = migrate_players_data(data)
            save_players(migrated_data)
            return migrated_data
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª players.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"players": []}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ players.json")
        return {"players": []}

def save_players(data):
    try:
        with open('players.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ players.json")

def update_rank(player):
    points = player['stats'].get('rank_points', 0)
    if points >= 801:
        player['stats']['rank'] = "–ú–∞–π–æ—Ä"
    elif points >= 501:
        player['stats']['rank'] = "–ö–∞–ø–∏—Ç–∞–Ω"
    elif points >= 301:
        player['stats']['rank'] = "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç"
    elif points >= 151:
        player['stats']['rank'] = "–°–µ—Ä–∂–∞–Ω—Ç"
    elif points >= 51:
        player['stats']['rank'] = "–ö–∞–ø—Ä–∞–ª"
    else:
        player['stats']['rank'] = "–†—è–¥–æ–≤–æ–π"

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def auto_finish_voting():
    await asyncio.sleep(AUTO_FINISH_DELAY)
    if voting_active:
        for participant_id in current_voting_participants:
            try:
                await bot.send_message(participant_id, "‚è∞ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            except Exception as e:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É %s", participant_id)
        await check_voting_complete()
        logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ —Ç–∞–π–º–µ—Ä—É (24 —á–∞—Å–∞)")

# –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    welcome_text = (
        "–°–∞–ª–∞–º, –±–æ–µ—Ü!\n"
        "–Ø –±–æ—Ç –≤–∞—à–µ–π CS2-—Ç—É—Å–æ–≤–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üèÜ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ø-10)\n"
        "üöÄ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'\n"
        "üéñ –ü—Ä–∏—Å—É–∂–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏ –∑–≤–∞–Ω–∏—è (–æ—Ç –†—è–¥–æ–≤–æ–≥–æ –¥–æ –ú–∞–π–æ—Ä–∞)\n"
        "üìä –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—á–∫–∏, –Ω–∞–≥—Ä–∞–¥—ã, –∏–≥—Ä—ã)\n\n"
        "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    inline_keyboard = [
        [
            types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help"),
            types.InlineKeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
        ]
    ]
    if message.from_user.id == ADMIN_ID:
        inline_keyboard.extend([
            [
                types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="manage_players"),
                types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_voting_menu")
            ]
        ])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.reply(welcome_text, reply_markup=keyboard)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", message.from_user.id)

@dp.message(Command(commands=['my_stats']))
async def my_stats(message: types.Message):
    user_id = message.from_user.id
    players = load_players()['players']
    player = next((p for p in players if p['id'] == user_id), None)
    if player:
        stats = player['stats']
        awards = player['awards']
        response = (
            f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ó–≤–∞–Ω–∏–µ: {stats.get('rank', '–†—è–¥–æ–≤–æ–π')}\n"
            f"–û—á–∫–∏: {stats.get('rank_points', 0)}\n"
            f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('games_played', 0)}\n"
            f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {stats.get('votes_cast', 0)}\n"
            f"MVP: {awards.get('mvp', 0)} —Ä–∞–∑\n"
            f"1st: {awards.get('place1', 0)} —Ä–∞–∑\n"
            f"2nd: {awards.get('place2', 0)} —Ä–∞–∑\n"
            f"3rd: {awards.get('place3', 0)} —Ä–∞–∑\n"
            f"–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞: {awards.get('breakthrough', 0)} —Ä–∞–∑"
        )
        await message.reply(response)
    else:
        await message.reply("‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")

@dp.message(Command(commands=['add_player']))
async def add_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_player [ID] [–∏–º—è]")
        return
    try:
        player_id = int(args[0])
        player_name = args[1]
        players_data = load_players()
        if any(p['id'] == player_id for p in players_data['players']):
            await message.reply(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        players_data['players'].append({
            "id": player_id,
            "name": player_name,
            "ratings": [],
            "played_last_game": False,
            "awards": {"mvp": 0, "place1": 0, "place2": 0, "place3": 0, "breakthrough": 0},
            "stats": {"mvp_count": 0, "games_played": 0, "votes_cast": 0, "rank_points": 0, "rank": "–†—è–¥–æ–≤–æ–π"}
        })
        save_players(players_data)
        await message.reply(f"‚úÖ {player_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤!")
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫ %s (ID: %s)", player_name, player_id)
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (—Å Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
@dp.message(Command(commands=['leaderboard']))
async def leaderboard(message: types.Message):
    players = load_players()['players']
    if not players:
        await message.reply("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        return
    sorted_players = sorted(players, key=lambda p: p['stats'].get('rank_points', 0), reverse=True)
    text = "*–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
    for i, p in enumerate(sorted_players, 1):
        text += f"{i}. *{p['name']}* ‚Äî {p['stats'].get('rank_points', 0)} –æ—á–∫–æ–≤\n"
    await message.reply(text, parse_mode="Markdown")
    logger.info("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == 'help')
async def callback_help(callback_query: types.CallbackQuery):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/my_stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/add_player - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/leaderboard - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n"
        "# –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, help_text)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É", callback_query.from_user.id)

@dp.callback_query(lambda c: c.data == 'my_stats')
async def callback_my_stats(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    players = load_players()['players']
    player = next((p for p in players if p['id'] == user_id), None)
    if player:
        stats = player['stats']
        awards = player['awards']
        response = (
            f"–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ó–≤–∞–Ω–∏–µ: {stats.get('rank', '–†—è–¥–æ–≤–æ–π')}\n"
            f"–û—á–∫–∏: {stats.get('rank_points', 0)}\n"
            f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats.get('games_played', 0)}\n"
            f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: {stats.get('votes_cast', 0)}\n"
            f"MVP: {awards.get('mvp', 0)} —Ä–∞–∑\n"
            f"1st: {awards.get('place1', 0)} —Ä–∞–∑\n"
            f"2nd: {awards.get('place2', 0)} —Ä–∞–∑\n"
            f"3rd: {awards.get('place3', 0)} —Ä–∞–∑\n"
            f"–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞: {awards.get('breakthrough', 0)} —Ä–∞–∑"
        )
        await bot.send_message(user_id, response)
    else:
        await bot.send_message(user_id, "‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", user_id)

@dp.callback_query(lambda c: c.data == 'start_voting_menu')
async def start_voting_menu(callback_query: types.CallbackQuery):
    global voting_active, breakthrough_voting_active
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    if voting_active or breakthrough_voting_active:
        inline_keyboard = [
            [
                types.InlineKeyboardButton(text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data="voting_active"),
                types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="stop_voting")
            ],
            [types.InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="current_results")]
        ]
        if not voting_active and breakthrough_voting_active:
            inline_keyboard.append([types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'", callback_data="stop_breakthrough_voting")])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await bot.send_message(callback_query.from_user.id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç!", reply_markup=keyboard)
        await bot.answer_callback_query(callback_query.id)
        return
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∏ —Ñ–ª–∞–≥ —É—á–∞—Å—Ç–∏—è
    players = load_players()['players']
    for player in players:
        player['played_last_game'] = True
        player['ratings'] = []
        if player['played_last_game']:
            player['stats']['games_played'] = player['stats'].get('games_played', 0) + 1
            player['stats']['rank_points'] = player['stats'].get('rank_points', 0) + 5
            update_rank(player)
    save_players({"players": players})
    
    inline_keyboard = [[types.InlineKeyboardButton(text=f"{player['name']} (ID: {player['id']})", callback_data=f"absent_{player['id']}")] for player in players]
    inline_keyboard.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="finish_voting_setup")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º %s", callback_query.from_user.id)

@dp.callback_query(lambda c: c.data.startswith('absent_'))
async def mark_absent(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    player_id = int(callback_query.data.split('_')[1])
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['played_last_game'] = False
            player['stats']['rank_points'] = player['stats'].get('rank_points', 0) - 5
            update_rank(player)
            break
    save_players(players_data)
    players = players_data['players']
    inline_keyboard = [[types.InlineKeyboardButton(text=f"{player['name']} (ID: {player['id']})", callback_data=f"absent_{player['id']}")] for player in players if player['played_last_game']]
    inline_keyboard.append([types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="finish_voting_setup")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ò–≥—Ä–æ–∫ —Å ID %s –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π", player_id)

@dp.callback_query(lambda c: c.data == 'finish_voting_setup')
async def finish_voting_setup(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    inline_keyboard = [
        [types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="launch_voting")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–º–µ—á–µ–Ω—ã. –ì–æ—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ?",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º %s", callback_query.from_user.id)

@dp.callback_query(lambda c: c.data == 'launch_voting')
async def launch_voting(callback_query: types.CallbackQuery):
    global voting_active, current_voting_participants, voting_message_id
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    if voting_active:
        await bot.answer_callback_query(callback_query.id, "‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç!")
        return
    voting_active = True
    players = load_players()['players']
    current_voting_participants = [p['id'] for p in players if p['played_last_game']]
    inline_keyboard = [[types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", url=f"t.me/{bot_username}")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    message = await bot.send_message(GROUP_ID, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ü–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)
    await bot.pin_chat_message(chat_id=GROUP_ID, message_id=message.message_id, disable_notification=True)
    voting_message_id = message.message_id
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º %s", callback_query.from_user.id)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
    asyncio.create_task(auto_finish_voting())

@dp.callback_query(lambda c: c.data == 'vote')
async def process_start_voting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    if user_id not in current_voting_participants:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!")
        return
    player = next((p for p in players if p['id'] == user_id), None)
    if not player or not player['played_last_game']:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ!")
        return
    participants = [p for p in players if p['played_last_game'] and p['id'] != user_id]
    for p in participants:
        inline_keyboard = [
            [
                types.InlineKeyboardButton(text="5", callback_data=f"rate_{p['id']}_5"),
                types.InlineKeyboardButton(text="6", callback_data=f"rate_{p['id']}_6"),
                types.InlineKeyboardButton(text="7", callback_data=f"rate_{p['id']}_7"),
            ],
            [
                types.InlineKeyboardButton(text="8", callback_data=f"rate_{p['id']}_8"),
                types.InlineKeyboardButton(text="9", callback_data=f"rate_{p['id']}_9"),
                types.InlineKeyboardButton(text="10", callback_data=f"rate_{p['id']}_10"),
            ],
            [
                types.InlineKeyboardButton(text="–ï—â—ë", callback_data=f"more_rates_{p['id']}")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await bot.send_message(user_id, f"–û—Ü–µ–Ω–∏ {p['name']} (1-10):", reply_markup=keyboard)
    finish_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="finish_voting_user")]
    ])
    await bot.send_message(user_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≤—Å–µ—Ö, –Ω–∞–∂–º–∏ –Ω–∏–∂–µ:", reply_markup=finish_keyboard)
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", user_id)

@dp.callback_query(lambda c: c.data.startswith('more_rates_'))
async def more_rates(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    player_id = int(callback_query.data.split('_')[2])
    players = load_players()['players']
    player = next((p for p in players if p['id'] == player_id), None)
    inline_keyboard = [
        [
            types.InlineKeyboardButton(text="1", callback_data=f"rate_{player_id}_1"),
            types.InlineKeyboardButton(text="2", callback_data=f"rate_{player_id}_2"),
            types.InlineKeyboardButton(text="3", callback_data=f"rate_{player_id}_3"),
        ],
        [
            types.InlineKeyboardButton(text="4", callback_data=f"rate_{player_id}_4"),
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.edit_message_text(
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        text=f"–û—Ü–µ–Ω–∏ {player['name']} (1-4):",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s", user_id, player_id)

@dp.callback_query(lambda c: c.data.startswith('rate_'))
async def process_rating(callback_query: types.CallbackQuery):
    global voting_active
    data = callback_query.data.split('_')
    player_id = int(data[1])
    rating = int(data[2])
    user_id = callback_query.from_user.id
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['ratings'].append(rating)
            save_players(players_data)
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=callback_query.message.message_id,
                text=f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {rating} –∏–≥—Ä–æ–∫—É {player['name']}!",
                reply_markup=None
            )
            await bot.answer_callback_query(callback_query.id)
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É %s –∏–≥—Ä–æ–∫—É %s", user_id, rating, player_id)
            break
    # –ï—Å–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫–∏ (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª), –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
    # –ù–æ —Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äì –∞–≤—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥
    # –ü–æ—ç—Ç–æ–º—É –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
    all_rated = all((len(p['ratings']) >= (len([pp for pp in players_data['players'] if pp['played_last_game']]) - 1)) 
                     for p in players_data['players'] if p['played_last_game'])
    if all_rated:
        await check_voting_complete()
        logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ—Ö")
    
@dp.callback_query(lambda c: c.data == 'finish_voting_user')
async def finish_voting_user(callback_query: types.CallbackQuery):
    global voting_active
    user_id = callback_query.from_user.id
    players_data = load_players()
    players = players_data['players']
    player = next((p for p in players if p['id'] == user_id), None)
    if not player or not player['played_last_game']:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ!")
        return
    player['stats']['votes_cast'] = player['stats'].get('votes_cast', 0) + 1
    save_players(players_data)
    await bot.send_message(user_id, "‚úÖ –¢–≤–æ—ë –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    await bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        reply_markup=None
    )
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–≤–µ—Ä—à–∏–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", user_id)
    # –ï—Å–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏—Ç–æ–≥–∏
    all_finished = all(
        (len(p['ratings']) >= (len([pp for pp in players if pp['played_last_game']]) - 1))
         for p in players if p['played_last_game']
    )
    if all_finished:
        await check_voting_complete()

async def check_voting_complete():
    global voting_active, breakthrough_voting_active, voting_message_id
    players_data = load_players()
    players = players_data['players']
    participants = [p for p in players if p['played_last_game']]
    if not participants:
        return False
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –∏–º–µ—é—â–∏–º—Å—è –¥–∞–Ω–Ω—ã–º (–µ—Å–ª–∏ –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç ‚Äì —Å—á–∏—Ç–∞–µ–º 0)
    averages = {}
    for p in participants:
        averages[p['id']] = (sum(p['ratings']) / len(p['ratings'])) if p['ratings'] else 0
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
    sorted_players = sorted(participants, key=lambda p: averages[p['id']], reverse=True)
    awards_notifications = []
    points_map = {1: 25, 2: 20, 3: 15, 4: 12, 5: 10, 6: 8, 7: 6, 8: 4, 9: 3, 10: 2}
    for i, player in enumerate(sorted_players[:10], 1):
        if i == 1:
            player['awards']['mvp'] += 1
            player['stats']['mvp_count'] += 1
            awards_notifications.append((player['id'], f"üèÜ –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É MVP –∑–∞ —ç—Ç—É –∏–≥—Ä—É (+{points_map[i]} –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {player['stats']['rank']}"))
        elif i == 2:
            player['awards']['place1'] += 1
            awards_notifications.append((player['id'], f"ü•á –¢—ã –∑–∞–Ω—è–ª 1-–µ –º–µ—Å—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ (+{points_map[i]} –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {player['stats']['rank']}"))
        elif i == 3:
            player['awards']['place2'] += 1
            awards_notifications.append((player['id'], f"ü•à –¢—ã –∑–∞–Ω—è–ª 2-–µ –º–µ—Å—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ (+{points_map[i]} –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {player['stats']['rank']}"))
        elif i == 4:
            player['awards']['place3'] += 1
            awards_notifications.append((player['id'], f"ü•â –¢—ã –∑–∞–Ω—è–ª 3-–µ –º–µ—Å—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ (+{points_map[i]} –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {player['stats']['rank']}"))
        else:
            awards_notifications.append((player['id'], f"–¢—ã –≤–æ—à—ë–ª –≤ —Ç–æ–ø-{i} —ç—Ç–æ–π –∏–≥—Ä—ã (+{points_map[i]} –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {player['stats']['rank']}"))
        player['stats']['rank_points'] = player['stats'].get('rank_points', 0) + points_map[i]
        update_rank(player)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result = "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è:\n"
    for i, player in enumerate(sorted_players[:10], 1):
        result += f"{i}. {player['name']} ‚Äî {averages[player['id']]:.2f}{' (MVP üèÜ)' if i==1 else ''}{' (ü•á 1st)' if i==2 else ''}{' (ü•à 2nd)' if i==3 else ''}{' (ü•â 3rd)' if i==4 else ''}\n"
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    for p in players:
        p['ratings'] = []
    save_players(players_data)
    message = await bot.send_message(GROUP_ID, result)
    await bot.pin_chat_message(chat_id=GROUP_ID, message_id=message.message_id, disable_notification=True)
    if voting_message_id:
        await bot.unpin_chat_message(chat_id=GROUP_ID, message_id=voting_message_id)
        voting_message_id = None
    for participant_id in current_voting_participants:
        try:
            await bot.send_message(participant_id, "üèÜ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ!")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %s", participant_id)
    for winner_id, award_text in awards_notifications:
        try:
            await bot.send_message(winner_id, award_text)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %s", winner_id)
    await bot.send_message(ADMIN_ID, "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'.")
    voting_active = False
    breakthrough_voting_active = True
    await start_breakthrough_voting()
    logger.info("–û—Å–Ω–æ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

async def start_breakthrough_voting():
    global breakthrough_voting_active, breakthrough_message_id
    players = load_players()['players']
    eligible_players = [p for p in players if p['played_last_game'] and not any([p['awards']['mvp'], p['awards']['place1'], p['awards']['place2'], p['awards']['place3']])]
    if not eligible_players:
        await bot.send_message(GROUP_ID, "üöÄ –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'!")
        breakthrough_voting_active = False
        return
    inline_keyboard = [[types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'", url=f"t.me/{bot_username}")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    message = await bot.send_message(GROUP_ID, "üöÄ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –Ω–∞—á–∞–ª–æ—Å—å! –ü–µ—Ä–µ–π–¥–∏ –≤ –ª–∏—á–∫—É –±–æ—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞:", reply_markup=keyboard)
    await bot.pin_chat_message(chat_id=GROUP_ID, message_id=message.message_id, disable_notification=True)
    breakthrough_message_id = message.message_id
    breakthrough_voting_active = True
    logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞–ø—É—â–µ–Ω–æ")

@dp.callback_query(lambda c: c.data == 'vote_breakthrough')
async def process_breakthrough_voting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    if user_id not in current_voting_participants:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏!")
        return
    player = next((p for p in players if p['id'] == user_id), None)
    if not player or not player['played_last_game']:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä–µ!")
        return
    eligible_players = [p for p in players if p['played_last_game'] and not any([p['awards']['mvp'], p['awards']['place1'], p['awards']['place2'], p['awards']['place3']])]
    if not eligible_players:
        await bot.answer_callback_query(callback_query.id, "‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'!")
        return
    inline_keyboard = [
        [types.InlineKeyboardButton(text=f"{p['name']}", callback_data=f"breakthrough_{p['id']}")] for p in eligible_players
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞':", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'", user_id)

@dp.callback_query(lambda c: c.data.startswith('breakthrough_'))
async def process_breakthrough_rating(callback_query: types.CallbackQuery):
    global breakthrough_voting_active
    data = callback_query.data.split('_')
    player_id = int(data[1])
    user_id = callback_query.from_user.id
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            if 'breakthrough_ratings' not in player:
                player['breakthrough_ratings'] = []
            player['breakthrough_ratings'].append(1)
            save_players(players_data)
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=callback_query.message.message_id,
                text=f"–¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {player['name']} –∫–∞–∫ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'!",
                reply_markup=None
            )
            await bot.answer_callback_query(callback_query.id)
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞ –∏–≥—Ä–æ–∫–∞ %s", user_id, player_id)
            break
    if await check_breakthrough_voting_complete():
        logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def check_breakthrough_voting_complete():
    global breakthrough_voting_active, breakthrough_message_id
    players = load_players()['players']
    participants = [p for p in players if p['played_last_game']]
    eligible_players = [p for p in players if p['played_last_game'] and not any([p['awards']['mvp'], p['awards']['place1'], p['awards']['place2'], p['awards']['place3']])]
    if not eligible_players:
        breakthrough_voting_active = False
        message = await bot.send_message(GROUP_ID, "üöÄ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
        await bot.pin_chat_message(chat_id=GROUP_ID, message_id=message.message_id, disable_notification=True)
        if breakthrough_message_id:
            await bot.unpin_chat_message(chat_id=GROUP_ID, message_id=breakthrough_message_id)
            breakthrough_message_id = None
        return True
    total_participants = len(participants)
    rated_players = [p for p in eligible_players if p.get('breakthrough_ratings', [])]
    if len(rated_players) < total_participants:
        return False
    sorted_eligible = sorted(eligible_players, key=lambda p: len(p.get('breakthrough_ratings', [])), reverse=True)
    max_votes = len(sorted_eligible[0].get('breakthrough_ratings', [])) if sorted_eligible else 0
    winners = [p for p in sorted_eligible if len(p.get('breakthrough_ratings', [])) == max_votes]
    awards_notifications = []
    if winners:
        winner_names = ", ".join(p['name'] for p in winners)
        for winner in winners:
            winner['awards']['breakthrough'] = winner['awards'].get('breakthrough', 0) + 1
            winner['stats']['rank_points'] = winner['stats'].get('rank_points', 0) + 10
            update_rank(winner)
            awards_notifications.append((winner['id'], f"üöÄ –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞ —ç—Ç—É –∏–≥—Ä—É (+10 –æ—á–∫–æ–≤)! –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {winner['stats']['rank']}"))
        result = f"üöÄ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞: {winner_names}!"
        message = await bot.send_message(GROUP_ID, result)
        await bot.pin_chat_message(chat_id=GROUP_ID, message_id=message.message_id, disable_notification=True)
    for player in players:
        player.pop('breakthrough_ratings', None)
    save_players({"players": players})
    if breakthrough_message_id:
        await bot.unpin_chat_message(chat_id=GROUP_ID, message_id=breakthrough_message_id)
        breakthrough_message_id = None
    for participant_id in current_voting_participants:
        try:
            await bot.send_message(participant_id, "üöÄ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ!")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %s", participant_id)
    for winner_id, award_text in awards_notifications:
        try:
            await bot.send_message(winner_id, award_text)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %s", winner_id)
    breakthrough_voting_active = False
    logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞' –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫
async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤–µ–±—Ö—É–∫–æ–º: %s", WEBHOOK_URL)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    app = web.Application()
    webhook_request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_request_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8080)))
    await site.start()
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", os.getenv('PORT', 8080))
    
    try:
        await asyncio.Event().wait()  # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    finally:
        await runner.cleanup()

if __name__ == '__main__':
    asyncio.run(main())
