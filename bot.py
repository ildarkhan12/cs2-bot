import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞—Å—Ç—Ä–æ–∏–º –Ω–∞ Render)
TOKEN = os.getenv('TOKEN')
WEBHOOK_HOST = 'https://cs2-bot-qhok.onrender.com'  # –ó–∞–º–µ–Ω–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
WEBHOOK_PATH = f'/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID
ADMIN_ID = 113405030  # –¢–≤–æ–π Telegram ID
GROUP_ID = -2484381098  # ID –≥—Ä—É–ø–ø—ã

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def load_players():
    try:
        with open('players.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"players": []}

def save_players(players_data):
    with open('players.json', 'w', encoding='utf-8') as f:
        json.dump(players_data, f, ensure_ascii=False, indent=4)

def load_maps():
    try:
        with open('maps.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {map_name: 0 for map_name in ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]}

def save_maps(maps_data):
    with open('maps.json', 'w', encoding='utf-8') as f:
        json.dump(maps_data, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("üéØ –ü—Ä–∏–≤–µ—Ç, –±–æ–µ—Ü! –Ø –±–æ—Ç —Ç–≤–æ–µ–π CS2-–∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                        "üî´ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤\n"
                        "üèÜ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–∞—Ä—Ç—ã\n"
                        "üéñ –ü—Ä–∏—Å—É–∂–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã\n"
                        "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                        "‚ÑπÔ∏è –ê–¥–º–∏–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = ("üìú **–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥**:\n"
                 "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                 "/my_stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                 "**–î–ª—è –∞–¥–º–∏–Ω–∞**:\n"
                 "/add_player <ID> <–∏–º—è> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/remove_player <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
                 "/start_voting ‚Äî –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥\n"
                 "/end_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n"
                 "/start_map_voting ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/end_map_voting ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—ã\n"
                 "/top ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
    await message.reply(help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /add_player (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['add_player'])
async def add_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_player <ID> <–∏–º—è>")
        return
    try:
        player_id = int(args[0])
        player_name = args[1]
        players_data = load_players()
        players_data['players'].append({
            "id": player_id,
            "name": player_name,
            "ratings": [],
            "awards": {"mvp": 0, "place1": 0, "place2": 0, "place3": 0},
            "stats": {"wins": 0, "avg_rating": 0, "mvp_count": 0}
        })
        save_players(players_data)
        await message.reply(f"‚úÖ {player_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤!")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /remove_player (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['remove_player'])
async def remove_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split()[1:]
    if len(args) < 1:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /remove_player <ID>")
        return
    try:
        player_id = int(args[0])
        players_data = load_players()
        players_data['players'] = [p for p in players_data['players'] if p['id'] != player_id]
        save_players(players_data)
        await message.reply(f"‚úÖ –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–¥–∞–ª—ë–Ω!")
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /start_voting (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['start_voting'])
async def start_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üéØ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="start_voting"))
    await bot.send_message(GROUP_ID, "üî´ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'start_voting')
async def process_start_voting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    players = load_players()['players']
    if user_id not in [p['id'] for p in players]:
        await bot.answer_callback_query(callback_query.id, "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")
        return
    for player in players:
        if player['id'] != user_id:  # –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
            keyboard = types.InlineKeyboardMarkup(row_width=5)
            buttons = [types.InlineKeyboardButton(str(i), callback_data=f"rate_{player['id']}_{i}") for i in range(1, 11)]
            keyboard.add(*buttons)
            await bot.send_message(user_id, f"–û—Ü–µ–Ω–∏ {player['name']} (1-10):", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–≤–µ—Ä—å –ª–∏—á–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
@dp.callback_query_handler(lambda c: c.data.startswith('rate_'))
async def process_rating(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    player_id = int(data[1])
    rating = int(data[2])
    players_data = load_players()
    for player in players_data['players']:
        if player['id'] == player_id:
            player['ratings'].append(rating)
            save_players(players_data)
            await bot.answer_callback_query(callback_query.id, f"–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª {rating} –∏–≥—Ä–æ–∫—É {player['name']}!")
            return

# –ö–æ–º–∞–Ω–¥–∞ /end_voting (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['end_voting'])
async def end_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    players = load_players()['players']
    for player in players:
        if player['ratings']:
            avg_rating = sum(player['ratings']) / len(player['ratings'])
            player['stats']['avg_rating'] = avg_rating
            player['ratings'] = []
        else:
            player['stats']['avg_rating'] = 0

    sorted_players = sorted(players, key=lambda p: p['stats']['avg_rating'], reverse=True)
    if sorted_players:
        sorted_players[0]['awards']['mvp'] += 1
        sorted_players[0]['stats']['mvp_count'] += 1
    if len(sorted_players) >= 2:
        sorted_players[1]['awards']['place1'] += 1
    if len(sorted_players) >= 3:
        sorted_players[2]['awards']['place2'] += 1
    if len(sorted_players) >= 4:
        sorted_players[3]['awards']['place3'] += 1

    save_players({"players": players})
    result = "üèÜ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è**\n\n"
    for i, p in enumerate(sorted_players, 1):
        awards = f" (MVP: {p['awards']['mvp']}, 1st: {p['awards']['place1']}, 2nd: {p['awards']['place2']}, 3rd: {p['awards']['place3']})"
        result += f"{i}. **{p['name']}** ‚Äî {p['stats']['avg_rating']:.2f}{awards}\n"
    result += "\nüéñ **–ù–∞–≥—Ä–∞–¥—ã**\n"
    if sorted_players: result += f"üëë MVP: {sorted_players[0]['name']}\n"
    if len(sorted_players) >= 2: result += f"ü•á 1st: {sorted_players[1]['name']}\n"
    if len(sorted_players) >= 3: result += f"ü•à 2nd: {sorted_players[2]['name']}\n"
    if len(sorted_players) >= 4: result += f"ü•â 3rd: {sorted_players[3]['name']}\n"
    await bot.send_message(GROUP_ID, result, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /start_map_voting (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['start_map_voting'])
async def start_map_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    maps = ["Dust2", "Mirage", "Inferno", "Nuke", "Overpass", "Vertigo", "Ancient", "Anubis", "Cache", "Train"]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for map_name in maps:
        keyboard.add(types.InlineKeyboardButton(map_name, callback_data=f"vote_map_{map_name}"))
    await bot.send_message(GROUP_ID, "üó∫ –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—è (–Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–µ):", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –∫–∞—Ä—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('vote_map_'))
async def process_map_voting(callback_query: types.CallbackQuery):
    map_name = callback_query.data.split('_')[2]
    maps_data = load_maps()
    maps_data[map_name] += 1
    save_maps(maps_data)
    await bot.answer_callback_query(callback_query.id, f"–¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {map_name}!")

# –ö–æ–º–∞–Ω–¥–∞ /end_map_voting (–∞–¥–º–∏–Ω)
@dp.message_handler(commands=['end_map_voting'])
async def end_map_voting(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    maps_data = load_maps()
    sorted_maps = sorted(maps_data.items(), key=lambda x: x[1], reverse=True)[:5]
    result = "üó∫ **–¢–æ–ø-5 –∫–∞—Ä—Ç**:\n"
    for i, (map_name, votes) in enumerate(sorted_maps, 1):
        result += f"{i}. {map_name} ‚Äî {votes} –≥–æ–ª–æ—Å–æ–≤\n"
    await bot.send_message(GROUP_ID, result, parse_mode='Markdown')
    save_maps({map_name: 0 for map_name in maps_data})  # –°–±—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤

# –ö–æ–º–∞–Ω–¥–∞ /top
@dp.message_handler(commands=['top'])
async def top_players(message: types.Message):
    players = load_players()['players']
    sorted_players = sorted(players, key=lambda p: p['stats'].get('avg_rating', 0), reverse=True)[:5]
    result = "üèÜ **–¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É**:\n"
    for i, p in enumerate(sorted_players, 1):
        result += f"{i}. **{p['name']}** ‚Äî {p['stats'].get('avg_rating', 0):.2f}\n"
    await message.reply(result, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /my_stats
@dp.message_handler(commands=['my_stats'])
async def my_stats(message: types.Message):
    user_id = message.from_user.id
    players = load_players()['players']
    for p in players:
        if p['id'] == user_id:
            stats = p['stats']
            awards = p['awards']
            response = (f"üéñ **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
                        f"–ü–æ–±–µ–¥: {stats['wins']}\n"
                        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}\n"
                        f"MVP: {awards['mvp']} —Ä–∞–∑\n"
                        f"1st: {awards['place1']} —Ä–∞–∑\n"
                        f"2nd: {awards['place2']} —Ä–∞–∑\n"
                        f"3rd: {awards['place3']} —Ä–∞–∑")
            await message.reply(response, parse_mode='Markdown')
            return
    await message.reply("‚ùå –¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
async def on_startup(_):
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ aiohttp
app = web.Application()
handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
handler.register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == '__main__':
    port = int(os.getenv("PORT", 5000))
    web.run_app(app, host='0.0.0.0', port=port)
