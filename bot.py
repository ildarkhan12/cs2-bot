import os
import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
TOKEN = os.getenv('TOKEN', '7905448986:AAG5rXLzIjPLK6ayuah9Hsn2VdJKyUPqNPQ')
WEBHOOK_HOST = 'https://cs2-bot-qhok.onrender.com'
WEBHOOK_PATH = f'/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≥—Ä—É–ø–ø—ã
ADMIN_ID = 113405030
GROUP_ID = -1002484381098
bot_username = "CS2RatingBot"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
voting_active = False
breakthrough_voting_active = False
current_voting_participants = []
voting_message_id = None
breakthrough_message_id = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: 24 —á–∞—Å–∞ = 86400 —Å–µ–∫—É–Ω–¥
AUTO_FINISH_DELAY = 86400

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def migrate_players_data(data):
    for player in data['players']:
        if 'stats' not in player:
            player['stats'] = {}
        if 'awards' not in player:
            player['awards'] = {"mvp": 0, "place1": 0, "place2": 0, "place3": 0, "breakthrough": 0}
        if 'avg_rating' in player['stats']:
            del player['stats']['avg_rating']
        player['stats'].setdefault('mvp_count', player['awards'].get('mvp', 0))
        player['stats'].setdefault('games_played', 0)
        player['stats'].setdefault('votes_cast', 0)
        if 'rank_points' not in player['stats']:
            points = player['stats']['games_played'] * 5
            points += player['awards'].get('mvp', 0) * 25
            points += player['awards'].get('place1', 0) * 20
            points += player['awards'].get('place2', 0) * 15
            points += player['awards'].get('place3', 0) * 12
            points += player['awards'].get('breakthrough', 0) * 10
            player['stats']['rank_points'] = points
        update_rank(player)
        player['awards'].setdefault('breakthrough', 0)
    return data

def load_players():
    try:
        with open('players.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            migrated_data = migrate_players_data(data)
            save_players(migrated_data)
            return migrated_data
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª players.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return {"players": []}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ players.json")
        return {"players": []}

def save_players(data):
    try:
        with open('players.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ players.json")

def update_rank(player):
    points = player['stats'].get('rank_points', 0)
    if points >= 801:
        player['stats']['rank'] = "–ú–∞–π–æ—Ä"
    elif points >= 501:
        player['stats']['rank'] = "–ö–∞–ø–∏—Ç–∞–Ω"
    elif points >= 301:
        player['stats']['rank'] = "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç"
    elif points >= 151:
        player['stats']['rank'] = "–°–µ—Ä–∂–∞–Ω—Ç"
    elif points >= 51:
        player['stats']['rank'] = "–ö–∞–ø—Ä–∞–ª"
    else:
        player['stats']['rank'] = "–†—è–¥–æ–≤–æ–π"

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def auto_finish_voting():
    await asyncio.sleep(AUTO_FINISH_DELAY)
    if voting_active:
        for participant_id in current_voting_participants:
            try:
                await bot.send_message(participant_id, "‚è∞ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
            except Exception as e:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É %s", participant_id)
        await check_voting_complete()
        logger.info("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ —Ç–∞–π–º–µ—Ä—É (24 —á–∞—Å–∞)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π-–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–µ–π –≤ –õ–°
    if message.chat.type != "private":
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=f"t.me/{bot_username}")]
        ])
        await message.reply("–≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=keyboard)
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        return

    # –ï—Å–ª–∏ –≤ –õ–° ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    welcome_text = (
        "–°–∞–ª–∞–º, –±–æ–µ—Ü!\n"
        "–Ø –±–æ—Ç –≤–∞—à–µ–π CS2-—Ç—É—Å–æ–≤–∫–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üèÜ –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ø-10)\n"
        "üöÄ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å '–ü—Ä–æ—Ä—ã–≤ –≤–µ—á–µ—Ä–∞'\n"
        "üéñ –ü—Ä–∏—Å—É–∂–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏ –∑–≤–∞–Ω–∏—è (–æ—Ç –†—è–¥–æ–≤–æ–≥–æ –¥–æ –ú–∞–π–æ—Ä–∞)\n"
        "üìä –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—á–∫–∏, –Ω–∞–≥—Ä–∞–¥—ã, –∏–≥—Ä—ã)\n\n"
        "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    inline_keyboard = [
        [
            types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help"),
            types.InlineKeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
        ]
    ]
    if message.from_user.id == ADMIN_ID:
        inline_keyboard.extend([
            [
                types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_data="manage_players"),
                types.InlineKeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥", callback_data="start_voting_menu")
            ]
        ])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.reply(welcome_text, reply_markup=keyboard)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏" (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(lambda c: c.data == 'manage_players')
async def manage_players_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    inline_keyboard = [
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player_prompt")],
        [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="remove_player_prompt")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
    logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s –≤—ã–∑–≤–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏", callback_query.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–∞–º–∏
@dp.callback_query(lambda c: c.data == 'add_player_prompt')
async def add_player_prompt(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_player [ID] [–ò–º—è] –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞.")
    logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É %s", callback_query.from_user.id)

@dp.callback_query(lambda c: c.data == 'remove_player_prompt')
async def remove_player_prompt(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove_player [ID] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞.")
    logger.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∏–≥—Ä–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É %s", callback_query.from_user.id)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
@dp.message(Command(commands=['remove_player']))
async def remove_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    args = message.text.split(maxsplit=1)[1:]
    if len(args) < 1:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /remove_player [ID]")
        return
    try:
        player_id = int(args[0])
        players_data = load_players()
        players_list = players_data['players']
        new_players_list = [p for p in players_list if p['id'] != player_id]
        if len(new_players_list) == len(players_list):
            await message.reply(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        players_data['players'] = new_players_list
        save_players(players_data)
        await message.reply(f"‚úÖ –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–¥–∞–ª—ë–Ω!")
        logger.info("–£–¥–∞–ª—ë–Ω –∏–≥—Ä–æ–∫ —Å ID %s", player_id)
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ /add_player —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ
@dp.message(Command(commands=['add_player']))
async def add_player(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –±–æ–µ—Ü!")
        return
    args = message.text.split(maxsplit=2)[1:]
    if len(args) < 2:
        await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_player [ID] [–ò–º—è]")
        return
    try:
        player_id = int(args[0])
        player_name = args[1]
        players_data = load_players()
        if any(p['id'] == player_id for p in players_data['players']):
            await message.reply(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID {player_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        players_data['players'].append({
            "id": player_id,
            "name": player_name,
            "ratings": [],
            "played_last_game": False,
            "awards": {"mvp": 0, "place1": 0, "place2": 0, "place3": 0, "breakthrough": 0},
            "stats": {"mvp_count": 0, "games_played": 0, "votes_cast": 0, "rank_points": 0, "rank": "–†—è–¥–æ–≤–æ–π"}
        })
        save_players(players_data)
        await message.reply(f"‚úÖ {player_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–∞–≤!")
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫ %s (ID: %s)", player_name, player_id)
    except ValueError:
        await message.reply("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞")

# –ö–æ–º–∞–Ω–¥–∞ /leaderboard –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤ (Markdown)
@dp.message(Command(commands=['leaderboard']))
async def leaderboard(message: types.Message):
    players = load_players()['players']
    if not players:
        await message.reply("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
        return
    sorted_players = sorted(players, key=lambda p: p['stats'].get('rank_points', 0), reverse=True)
    text = "*–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
    for i, p in enumerate(sorted_players, 1):
        text += f"{i}. *{p['name']}* ‚Äî {p['stats'].get('rank_points', 0)} –æ—á–∫–æ–≤\n"
    await message.reply(text, parse_mode="Markdown")
    logger.info("–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %s", message.from_user.id)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç.–¥. –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# (–∫–æ–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, callback_query –¥–ª—è –æ—Ü–µ–Ω–æ–∫, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Ä—ã–≤–∞ –≤–µ—á–µ—Ä–∞ –∏ —Ç.–¥.)

# –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "help"
@dp.callback_query(lambda c: c.data == 'help')
async def callback_help(callback_query: types.CallbackQuery):
    help_text = (
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/my_stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/add_player - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/remove_player - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/leaderboard - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n"
        "# –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, help_text)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É", callback_query.from_user.id)

# –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ø—Ä–æ—Ä—ã–≤–∞ –≤–µ—á–µ—Ä–∞ –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π‚Ä¶
# [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ª–æ–≥–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —Ç.–ø.]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫
async def on_startup(dispatcher: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤–µ–±—Ö—É–∫–æ–º: %s", WEBHOOK_URL)

async def on_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    app = web.Application()
    webhook_request_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_request_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8080)))
    await site.start()
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", os.getenv('PORT', 8080))
    
    try:
        await asyncio.Event().wait()  # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    finally:
        await runner.cleanup()

if __name__ == '__main__':
    asyncio.run(main())
